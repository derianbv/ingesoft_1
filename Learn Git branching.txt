

eLink: https://learngitbranching.js.org/?locale=es_ES&NODEMO= 

**************************************************************** LOCALES O SINGLE PLAYER *********************************************************************
eLevel 1: ----------------------------------------------------------------------------------
-Los commits son snapshots del archivo en ese instante: checkpoints
-Los commits se guardan en el historial de commits.
-Las branches son solo punteros a commits especificos: 

CÓMO FUNCIONA GIT: 
0. COMMITS (Checkpoint): Son checkpoints en el documento que registran el estado actual de todos los documentos del repositorio (Como ir guardando el proyecto). 
Cuando realizo nuevos commits entonces voy a ir creando un historial de checkpoints A -- B -- C, en realidad van con C: C1 -- C2 -- C3 -- C_n 

1. BRANCH (Puntero a Checkpoint): Cuando creo una branch es simplemente un puntero a un Commit en especifico. 
1.1. A -- B -- C (Main, Head) Acá estamos trabajando con la branch Main que es un puntero que apunta al último commit, si yo creo un nuevo commit con "git commit" entonces le hago un snapshot y el historial crece en el sentido en donde apunte HEAD. 

A -- B -- c (MAIN, HEAD) -> git commit -> A -- B -- C -- D (MAIN*). Luego, si creo una nueva branch ("git branch jose") significa que hay dos punteros apuntando a C: A -- B -- C -- D (MAIN*, jose).

1.2. HEAD ("*", Puntero a puntero rama o a commit): Head es un puntero que apunta a branches: HEAD -> branch1  (Commit) -> Commit 4. Esto indica hacia cual de las ramas va a crecer el historial  
C: A -- B -- C -- D (MAIN*, jose)


Si es HEAD -> COMMIT: 
-Significa que detachamos el HEAD de alguna rama y lo pusimos en un COMMIT, si queremos hacer "git checkout COMMIT" en realidad tenemos que poner el Hash el commit en específico: 
"git checkout fed2da64c0efc5293610bdd892f82a58e8cbc5d8" para ver los hashes se usa "git log"  o ya con "git checkout fed2" git hub debería reconocerlo 


-EJEMPLO:

[commit A] ← [commit B] ← [commit C] ← Main* 
                             ↑
                           jose

Cambiar de rama: "git checkout jose": 


[commit A] ← [commit B] ← [commit C] ← Main 
                                     ↑
                                   jose*

Ahora HEAD apunta a la rama jose y los nuevos commits irán en esa dirección: 

git commit -m "nuevo cambio"

[commit A] ← [commit B] ← [commit C] ← main
                                      \
                                       [commit D] ← jose* 


Level 3: ----------------------------------------------------------------------------------
3.0: Hay dos merge:  1. Merge con commit automático (la mayoría de los casos),  2. Fast-forward merge (sin nuevo commit)

MAS SENCILLO DE LO QUE PARECE, SIMPLEMENTE JUNTAR LOS CODIGOS Y AVANZAR EN LA BRANCH CON EL HEAD



3.1: MERGE con commit automático **cuelgo al adelantado o a mismo nivel**:  SUMA DE LOS COMMITES QUE APUNTAN LAS RAMAS MEZCLADAS: basicamente que  git merge rama1 (desde main) hace un C_rama1 + C_main para crear un C_n+1 que suma los codigos (el texto interno) de  C_rama1 + C_main y mueve el puntero brach que tenga el head hacia este C_n+1. ES DECIR, MERGE HACE UN COMMIT AUTOMÁTICO. 

EJEMPLO: 
-Tengo dos branches, main y funcion1, en funcion1 he hecho dos commits extra (C4, C5), me debo pasar a main con checkout y usar git merge funcion1 para crear un nuevo commit que tenga dos commits padres, funcion1 sigue apunto a C5 y main apunta a C6.
Es decir, "git merge rama1" 

C1 -- C2 -- C3 <- (main)
            \
             C4 -- C5 <- (funcion1)*

-"git checkout main" (Mueve el HEAD al puntero main): 

C1 -- C2 -- C3 <- (main)*
            \
             C4 -- C5 <-(funcion1)

-"git merge funcion1" crea un nuevo commit que es la suma de los últimos commits de ambas ramas (C3 de main + C5 de function = C6 de main), main avanza al C6 porque es el que tenía el HEAD. El puntero branch mergeado solo mergea su commit más no mueve su puntero, es decir, en el ejemplo, funcion1 va a seguir apuntando a C5 que fue su último commit. 

C1 -- C2 -- C3 ----------- C6 <-(main)*
            \             /
             C4 -------- C5 <-(funcion1)


3.2 "¿Qué pasa si regreso a una rama que ya fue mergeada, pero que no se movió después del merge (sigue apuntando a su último commit anterior al merge)?": 

"git checkout funcion1" (que pasa el HEAD a funcion1): 

C1 -- C2 -- C3 -------- C6 <-(main)
          \             /
           C4 -- C5 <-(funcion1)*



Y hago un "git commit" creando un nuevo C7 en la línea de funcion1: 

C1 -- C2 -- C3 -------- C6 <-(main)
          \             /
           C4 ------  C5 -- C7 <-(funcion1)*




y si creo tres más queda algo así: 

C1 -- C2 -- C3 -------- C6 <-(main)
          \             /
           C4 -- C5 -- C7 -- C8 -- C9 -- C10 <-(funcion1)*



3.3. Fast-forward merge (sin nuevo commit) adelantado jala al atrasado. 
Acá como el pequeño no ha avanzado y sigue un mismo camino, entonces, solo se cambia el puntero atrazado al adelantado. 

C1 -- C2 -- C3 <-(main)
             \
              C4 -- C5 <-(funcion1)*

git checkout main
git merge funcion1


C1 -- C2 -- C3 -- C4 -- C5 <-(main, funcion1)*

De este modo podemos seguir con las ramas que queramos, sirve pensarlo como carreteras que se van bifurcando o uniendo en algun punto




Level 4: ------------------------------------------------------------------------------------------------------------------
REBASE: Aparte del merge, puedo juntar los códigos con Rebase

EPP: Pone los commits que he hecho en una rama x sobre los commits de una rama y a la que le hice rebase. 

EJEMPLO: 

C1 -- C2 -- C3 <-- (main) 
             \ 
              C4 -- C5 (func1*) 

si hago: 
"git checkout func1" (pasar HEAD a func1, aunque en el ejemplo ya está) 
"git rebase main": 

C1 -- C2 -- C3 -- C6 <-- (main)                            C1 -- C2 --- C3 -- C6 -- C4' -- C5' 
              \                          -->                                   ↑            ↑
              C4 -- C5 (func1*)                                             (main)       (func1) 

Lo que hace git es que pone todos los commits de esa rama que está rebasando sobre el último commit de la rama rebasada. Estos commits (CN') con apostrofo son copias de los normalitos (CN) que aún existen pero a nadie le 
importan. 


El ejemplo anterior da exactamente igual a: 

C1 -- C2 -- C3 -- C6 <-- (main)                           
              \                                              
              C4 -- C5 (func1*)    

"git merge main": 


C1 -- C2 -- C3 ------- C6 <- (main)                           
              \          \                                    
              C4 -- C5 -- C7 <- (func1) 

En ambos ejemplos C5' ==  C7 


Level 5 y 6: ------------------------------------------------------------------------------------------------------------------



Si es HEAD -> COMMIT: 
-Significa que detachamos el HEAD de alguna rama y lo pusimos en un COMMIT, si queremos hacer "git checkout COMMIT" en realidad tenemos que poner el Hash el commit en específico: 
"git checkout fed2da64c0efc5293610bdd892f82a58e8cbc5d8" para ver los hashes se usa "git log"  o ya con "git checkout fed2" git hub debería reconocerlo 

Sin embargo se pueden usar movimientos re posición relativos: 
1.  Desatacheo el HEAD de la rama actual para que pase de Ejemplo: main* -> C5* 
2. Si me quiero mover un Commit hacia atrás ^ o un número de commits en especcífico: ~n

Ejemplo: 

C1 -- C2 -- C3 -- C4 
                   ↑
                (main*) 

"git checkout main^^": entonces el Head se va a ir al COMMIT abuelo (abuelo porque hay 2 ^)  de main: 


C1 -- C2 -- C3 -- C4 
       ↑           ↑
      (*)        (main) 

-también podemos usar esta notación relativa al HEAD: 


C1 -- C2 -- C3 -- C4 
       ↑           ↑
      (*)        (main) 

"git checkout HEAD^": 

 C1 -- C2 -- C3 -- C4 
 ↑                  ↑
(*)               (main) 



Level 7: ------------------------------------------------------------------------------------------------------------------

Uso del ~: 

Ejemplo, el de arriba, pero ahora queremos pasar el HEAD al C1 con un solo comando, no como arriba que usamos varios: 

C1 -- C2 -- C3 -- C4 
                   ↑
                (main*) 

"git checkout HEAD~3": 

 C1 -- C2 -- C3 -- C4 
 ↑                  ↑
(*)               (main) 


Podemos mover una rama a una posición concreta con la opción -f, pero siempre tomando como referencia HEAD. Nada de git branch -f func1~3; primero haz git checkout func1 y luego git branch -f main HEAD~3.

C1 -- C2 -- C3 -- C4 
                   ↑
                (main*) 

"git branch -f main HEAD~3": 

 C1 -- C2 -- C3 -- C4 
 ↑                  ↑
(main)             (*) 


También puedo mover ramas independientemente, sabiendo el commit al que quiero ir con su HASH: 


git log: Ver los HASHES. 

git branch -f main hash1234


main va a puntar a hash1234 que es un commit.  

Level 8: ------------------------------------------------------------------------------------------------------------------

REVERTIR CAMBIOS: 
1. git revert, 2. git reset: 

2. git reset (USARLO LOCALMENTE)   
Mueve el puntero chekado un commit atrás, o sea el último queda a la deriva, en terminos practicos borra el último commit a lo malecho: 

C1 -- C2 -- C3 -- C4 
                   ↑
                (main*) 

"git reset HEAD~1": 


C1 -- C2 -- C3 -- C4 
            ↑
         (main*) 

1. git revert (USARLO COMPARTIDO): 
Crea un nuevo commmit que revierte los cambios hechos en el Commit previo, así mantiene el historial intacto. 

C1 -- C2 -- C3 -- C4 
                   ↑
                (main*) 

"git revert HEAD" 

C1 -- C2 -- C3 -- C4 -- C4'
                         ↑
                      (main*) 





| Característica                   | `git reset`                                            | `git revert`                                                    |
| -------------------------------- | ------------------------------------------------------ | --------------------------------------------------------------- |
| ¿Qué hace?                       | Mueve la rama y **borra el historial** (si es forzado) | Crea un commit nuevo que "deshace" otro commit                  |
| ¿Afecta el historial?            | Sí, **reescribe el historial**                         | No, mantiene el historial intacto                               |
| ¿Es seguro en repos compartidos? | ❌ No seguro (puede romper el historial compartido)     | ✅ Seguro (historia lineal, sin sobrescribir)                    |
| ¿Deshace cambios?                | Sí, puede borrar commits por completo                  | Sí, pero lo hace de forma explícita y trazable                  |
| ¿Se puede usar en producción?    | Solo si estás trabajando solo o con ramas locales      | Sí, es el método recomendado para revertir en ramas compartidas |





Level 9: ------------------------------------------------------------------------------------------------------------------
CHERRY-PICK: traer un commit y ya, xd robarlo del deck, pero OJO, solo puedo traer de otra rama, nada de padres directos. 
EPP: sirve para implementar commits epecificos en la rama en la que estoy (solo eso) y se copian como nuevos commits, git cherry-pick C1, ..., Cn: 
Ejemplo: 

C1 -- C2 -- C3 -- C6 <-- (main*)                           
              \                                              
              C4 -- C5 -- C7 (func1)    

parado en main, hago 'git cherry-pick C5': 

C1 -- C2 -- C3 -- C6 -- C5'<-- (main*)                           
              \                                              
              C4 -- C5 -- C7 (func1)    

en este caso agrega ese commit en específico como uno nuevo


Level 10: ------------------------------------------------------------------------------------------------------------------
Rebase interactivo: 

'git rebase -i HEAD~4'

C1 -- C2 -- C3 -- C4 -- C5 -- C6 <-(main*)
      ↑
    PARED 

con el head~4 digo que voy a setear la pared en el commit actual + 4 hacíá atrás, lo que significa que voy a agarrar a todos los commits del camino menos al de la pared, luego voy a poder entrar a un editor de los commits, puedo cambiarlos de orden o dejar de incluir un git, cuando haga cambios van a salir desde el commit pared en adelante como commits primos: C4'. 

Luego de ordenarse o gestionarse de nueva manera, me quedo con una línea de Cn'y los commits pasados mueres (se vuelven opacos), nadie apunta a ellos


Level 11 y 12: --------------------------------------------------------------------------------------------------------------------
AMEND: corregir errorsitos, tipo, al ultimo commit le saco un commit nuevo y descarto el anterior.
"git commit --amend"


C1 -- C2 -- C3 -- C6

"git commit --amend"

C1 -- C2 -- C3 -- C6' 

y C6 murió :( 


Level 13: --------------------------------------------------------------------------------------------------------------------
git tag pepito C2 

esto pone una marca a C2 de pepito, lo puedo checkear pero entro solo con la cabeza, y si hago checkouts el tag no se mueve, solo salen commits solitos. 


Level 14: --------------------------------------------------------------------------------------------------------------------
GIT  DESCRIBE: 

Diagrama de ejemplo
===================

           C4--C5--C7           <- func1
          /
C1--C2--C3--C6--C5'             <- main (HEAD)
        |
        v1.0 (tag)

• v1.0 etiqueta el commit C3.
• main avanzó a C6 y luego se reescribió en C5'.
• func1 se bifurcó en C3 y continuó con commits propios.
git describe en main (HEAD en C5'):

'git describe'
v1.0_2_g<hashC5'>
– Significa: “dos commits por encima de v1.0, en el hash C5'”.

git describe en func1 (HEAD en C7): 

git checkout func1
git describe:

v1.0_3_g<hashC7>
– Significa: “tres commits por encima de v1.0, en el hash C7”.


Level 15: --------------------------------------------------------------------------------------------------------------------
REBASE CON DOS ARG: 

| Comando              | ¿Quién se mueve? | ¿Quién se queda? |
| -------------------- | ---------------- | ---------------- |
| `git rebase C4 HEAD` | rama `HEAD`      | commit C4 (main) |
| `git rebase HEAD C4` | rama `C4` (main) | commit HEAD      |


Level 16: --------------------------------------------------------------------------------------------------------------------
checkout papá si hay 2 y uso posicionamiento relativo (al HEAD): 

si tenemos este caso en donde los papas de C7 son C5 Y C6

C1 -- C2 -- C3 ------- C6 <- (main)                           
              \          \                                    
              C4 -- C5 -- C7 <- (func1*) 

si hago: 'git checkout HEAD~1' pues no sabe porque tiene dos papas, entonces podemos enumerarlos e ir al ^n: 

HEAD^1 → C5 porque acá se hizo el merge

HEAD^2 → C6 y este se trajo con el merge

git checkout HEAD^1 

C1──C2──C3───C6   ← main
        \      \
         C4──C5─C7   ← func1
             ↑
            HEAD (detached)

Level 17: --------------------------------------------------------------------------------------------------------------------

